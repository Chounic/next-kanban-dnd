import {
  type Generated,
  type ColumnType,
  Kysely,
  Selectable,
  Insertable,
  Updateable,
} from "kysely";
import { PostgresJSDialect } from "kysely-postgres-js";
import postgres from "postgres";

export interface TaskTable {
  // Columns that are generated by the database should be marked
  // using the `Generated` type. This way they are automatically
  // made optional in inserts and updates.
  id: Generated<number>;
  name: string;
  description: string;
  status: ColumnType<"backlog" | "ready" | "in-progress" | "done">;

  // You can specify a different type for each operation (select, insert and
  // update) using the `ColumnType<SelectType, InsertType, UpdateType>`
  // wrapper. Here we define a column `createdAt` that is selected as
  // a `Date`, can optionally be provided as a `string` in inserts and
  // can never be updated:
  createdAt: ColumnType<Date, string | undefined, never>;
}

// Type pour sélectionner une tâche (lecture depuis la DB)
export type Task = Selectable<TaskTable>;

// Type pour insérer une nouvelle tâche
export type CreateTask = Insertable<TaskTable>;

// Type pour mettre à jour une tâche existante
export type UpdateTask = Omit<Updateable<TaskTable>, "id"> & { id: number };

// Keys of this interface are table names.
export interface Database {
  tasks: TaskTable;
}

export const db = new Kysely<Database>({
  dialect: new PostgresJSDialect({
    postgres: postgres(process.env.POSTGRES_URL!, { ssl: false }),
  }),
});
export { sql } from "kysely";

import {
  type Generated,
  type ColumnType,
  Kysely,
  Selectable,
  Insertable,
  Updateable,
  GeneratedAlways,
} from "kysely";
import { PostgresJSDialect } from "kysely-postgres-js";
import postgres from "postgres";

// This adapter exports a wrapper of the original `Kysely` class called `KyselyAuth`,
// that can be used to provide additional type-safety.
// While using it isn't required, it is recommended as it will verify
// that the database interface has all the fields that Auth.js expects.
import { KyselyAuth } from "@auth/kysely-adapter";
import type { Codegen } from "@auth/kysely-adapter";

export interface UserTable {
  id: GeneratedAlways<string>;
  name: string | null;
  email: string;
  emailVerified: Date | null;
  password: string | null;
  image: string | null;
  createdAt: ColumnType<Date, string | undefined, never>;
}

// Type pour sélectionner une tâche (lecture depuis la DB)
export type User = Selectable<UserTable>;

// Type pour insérer une nouvelle tâche
export type CreateUser = Insertable<UserTable>;

// Type pour mettre à jour une tâche existante
export type UpdateUser = Omit<Updateable<UserTable>, "id"> & { id: number };

export interface Account {
  id: GeneratedAlways<string>;
  userId: string;
  type: string;
  provider: string;
  providerAccountId: string;
  refresh_token: string | null;
  access_token: string | null;
  expires_at: number | null;
  token_type: string | null;
  scope: string | null;
  id_token: string | null;
  session_state: string | null;
  [key: string]: unknown;
}

export interface Session {
  id: GeneratedAlways<string>;
  userId: string;
  sessionToken: string;
  expires: Date;
}

export interface VerificationToken {
  identifier: string;
  token: string;
  expires: Date;
}

export interface TaskTable {
  // Columns that are generated by the database should be marked
  // using the `Generated` type. This way they are automatically
  // made optional in inserts and updates.
  id: Generated<number>;
  uuid: Generated<string> | string;
  name: ColumnType<string, string, string>;
  description: string;
  status: ColumnType<"backlog" | "ready" | "in-progress" | "done">;
  userId: string;
  priority: ColumnType<"low" | "medium" | "high" | "urgent">;
  dueDate: Date | null;
  labels: ColumnType<string[], string[] | undefined, string[] | undefined>;
  parentTaskId: ColumnType<
    number | null,
    number | undefined,
    number | undefined
  >;
  archived: ColumnType<boolean, boolean | undefined, boolean | undefined>;
  estimatedTime: number | null;
  // You can specify a different type for each operation (select, insert and
  // update) using the `ColumnType<SelectType, InsertType, UpdateType>`
  // wrapper. Here we define a column `createdAt` that is selected as
  // a `Date`, can optionally be provided as a `string` in inserts and
  // can never be updated:
  createdAt: ColumnType<Date, never, never>;
}

// Type pour sélectionner une tâche (lecture depuis la DB)
export type Task = Selectable<TaskTable>;

// Type pour insérer une nouvelle tâche
export type CreateTask = Insertable<TaskTable>;

// Type pour mettre à jour une tâche existante
export type UpdateTask = Omit<Updateable<TaskTable>, "id"> & {
  id: number;
};

// Keys of this interface are table names.
export interface Database {
  tasks: TaskTable;
  User: UserTable;
  Account: Account;
  Session: Session;
  VerificationToken: VerificationToken;
}

export const db = new KyselyAuth<Database, Codegen>({
  dialect: new PostgresJSDialect({
    postgres: postgres(process.env.POSTGRES_URL!, { ssl: false }),
  }),
});
export { sql } from "kysely";
